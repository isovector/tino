#!/usr/bin/env bash

USER=$(whoami)
LSB=$(lsb_release -a 2>/dev/null | grep Codename | cut -d "	" -f 2-)

inpath() { [ -x "`which "$1" 2>/dev/null`" ]; }

install() {
    as_root apt-get install "$@" -y
}

remove() {
    as_root apt-get remove "$@" -y
}

tino() {
    "$HOME/.tino/bin/$@"
}

frill() {
    "$@"
}

warning() {
    echo "preparing to install ${1}...";
    echo -n "continue? ";
    read
    init_root
}

init_root() {
    if [ "`id -u`" -ne 0 ]; then
        if inpath sudo && sudo -l >/dev/null 2>&1; then
            as_root() {
                if [ "$1" = exec ]; then ex="exec"; shift; fi
                $ex sudo "$@"
            }
        else
            echo "Warning: sudo not installed or not configured" >&2
            as_root() {
                if [ "$1" = exec ]; then ex="exec"; shift; fi
                $ex su -c "$*"
            }
        fi
    else
        as_root() { "$@" ; }
    fi
}

purge() {
    echo "continuing past this point will delete a bunch of stuff"
    warning "purge"

    # "manually" install the components of these metapackages
    # as_root aptitude unmarkauto '?reverse-depends(lubuntu-core) | ?reverse-recommends(lubuntu-core)'
    # as_root aptitude unmarkauto '?reverse-depends(ubuntu-standard) | ?reverse-recommends(ubuntu-standard)'

    # drop the ones we don't care about
    # remove firefox command-not-found language-selector-common
    # remove bluez bluez-cups bluez-alsa openbox
    as_root apt-get autoremove
}

setup_basic() {
    # fix dpkg if it's broken
    as_root dpkg --configure -a

    # setup pacman
    as_root wget -O /usr/local/bin/pacman https://raw.githubusercontent.com/icy/pacapt/5b8990742657c1d44c0ee63d223afbf60d96e026/pacapt
    as_root chmod 755 /usr/local/bin/pacman

    # install super basic packages
    as_root apt-get update
    install curl zsh git python vim ssh tmux

    install python3

    # setup a sane env
    as_root chsh --shell `which zsh` "$USER"
    cd
    mkdir .src

    # install tino utils
    git clone https://github.com/isovector/tino .tino
    cd .tino
    as_root ln -s "/$HOME/.tino/bin/tino" /usr/local/bin/tino
    tino setup dotfiles
    tino setup vim

    # setup git
    git config --global user.name "Sandy Maguire"
    git config --global user.email "sandy@sandymaguire.me"
    git config --global credential.helper cache
    git config --global credential.helper 'cache --timeout=3600'
    git config --global push.default matching
    git config --global core.excludesfile ~/.gitignore

    # setup ssh and net
    cd
    mkdir .ssh
    cd .ssh
    yes '' | ssh-keygen -t rsa -C "sandy@sandymaguire.me"
    as_root ssh-add id_rsa
    as_root adduser $USER netdev
}

setup_env() {
    return
}

setup_extra() {
    # install pragmata pro
    as_root mkdir -p /usr/share/fonts/truetype/pragmata
    as_root wget -O/usr/share/fonts/truetype/pragmata/PragmataPro.ttf http://redlegion.org/font/PragmataPro.ttf
    as_root fc-cache -f -v


    # install extra packages
    install sshfs acpi sqlite3 iftop rfkill rsync
    install make gcc g++ binutils libgmp-dev
    install exuberant-ctags silversearcher-ag mlocate inotify-tools

    install subversion mercurial linux-headers-generic

    # setup stack
    wget -q -O- https://s3.amazonaws.com/download.fpcomplete.com/ubuntu/fpco.key | as_root apt-key add -
    echo "deb http://download.fpcomplete.com/ubuntu/$LSB stable main" | as_root tee -a /etc/apt/sources.list
    as_root apt-get update

    cd
    install stack
    if [ "$?" != 0 ]; then
        # install stack on 32 bit systems
        wget -Ostack.gz https://github.com/commercialhaskell/stack/releases/download/v1.1.2/stack-1.1.2-linux-x86_64.tar.gz
        gunzip stack.gz
        as_root mv stack-1.1.2-linux-x86_64/stack /usr/local/bin/stack
    fi

    /usr/local/bin/stack setup
    /usr/local/bin/stack install turtle

    # bootstrap cabal
    install cabal-install haskell-platform
    cabal update
    cabal install cabal-install
    remove cabal-install haskell-platform

    # and pip
    wget -q -O- https://bootstrap.pypa.io/get-pip.py | as_root python2
}

setup_heavy() {
    frill install gimp anki texlive-latex-recommended libreoffice
}

setup_gui() {
    install terminator aspell aspell-en redshift xclip acpi xterm x11-utils
    install feh dzen2 conky scrot trayer
    # install synapse
    install thunar evince gpicview vim-gtk lxrandr
    install pidgin cmus chromium-browser vlc deluge-gtk

    install libgtkhotkey1
    cd ~/Downloads
    wget -O synapse.deb https://launchpad.net/~synapse-core/+archive/ubuntu/ppa/+files/synapse_0.2.10-2ubuntu3_amd64.deb
    as_root dpkg -i synapse.deb
    cd

    install libxrandr-dev pkg-config libxft-dev libx11-dev libxinerama-dev
    tino setup xmonad

    frill install anki
    frill as_root python -c "import sys; py3 = sys.version_info[0] > 2; u = __import__('urllib.request' if py3 else 'urllib', fromlist=1); exec(u.urlopen('http://status.calibre-ebook.com/linux_installer').read()); main()"

    frill pip install beets

    # install cmus posting
    cd $DIR
    mkdir .cmus
    wget https://raw.github.com/jkramer/post-fm/master/post-fm -O .cmus/postfm
    vim .cmus/postfm
    chmod +x .cmus/postfm
}

setup_stats() {
    # rescuetime is broken
    install python-tk rescuetime imagemagick
    pip install svn+https://python-xlib.svn.sourceforge.net/svnroot/python-xlib/tags/xlib_0_15rc1/
    as_root pip install galileo
    cd
    git clone https://github.com/gurgeh/selfspy.git .src
    cd .src/selfspy
    as_root python2 setup.py install
}

echo "build types:"
echo -e "\tfull"
echo -e "\theadless"
echo -e "\tbasic"
echo -e "\tuntrusted"

[ $# -gt 0 ] || set -- help

case "$1" in
    full)
        warning full
        setup_basic
        setup_env
        setup_extra
        setup_gui
        setup_stats
        setup_heavy
        purge
        ;;

    basic)
        warning basic
        setup_basic
        setup_env
        purge
        ;;

    headless)
        warning headless
        setup_basic
        setup_env
        setup_extra
        purge
        ;;

    untrusted)
        warning untrusted
        setup_basic
        setup_env
        setup_extra
        setup_gui
        setup_heavy
        purge
        ;;


    *)
        ;;
esac

# TODO: crontab

