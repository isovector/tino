#!/usr/bin/env zsh

basename=`basename "$0"`
if [ "$basename" = tino -o "$basename" = t ]; then
  sandy="$basename "
  if [ "$#" -eq 0 ]; then
      basename="usage"
  else
      basename="$1"
      shift
  fi
fi

inpath() { [ -x "`which "$1" 2>/dev/null`" ]; }


root_init() {
  if [ "`id -u`" -ne 0 ]; then
    if inpath sudo && sudo -l >/dev/null 2>&1; then
      as_root() {
        if [ "$1" = exec ]; then ex="exec"; shift; fi
        $ex sudo "$@"
      }
    else
      echo "Warning: sudo not installed or not configured" >&2
      as_root() {
        if [ "$1" = exec ]; then ex="exec"; shift; fi
        $ex su -c "$*"
      }
    fi
  else
    as_root() { "$@" ; }
  fi
}

case "$basename" in
    test)
        echo "hello"
        ;;


    edit|e)
        gvime_ok() { inpath gvim &&
            gvim --serverlist 2>/dev/null | grep '^E$' >/dev/null; }
        gvim_ok() { inpath gvim &&
            gvim --serverlist 2>/dev/null | grep '.' >/dev/null; }
        case "$DISPLAY" in
            :*)
                if gvime_ok; then
                    [ -n "$*" ] || exit 0
                    exec gvim --servername E --remote-tab "$@"
                elif gvim_ok; then
                    [ -n "$*" ] || exit 0
                    exec gvim --remote-tab "$@"
                elif inpath gvim && [ -z "$*" ]; then
                    exec gvim --servername e
                fi ;;
        esac
        if [ -n "$STY" ]; then
            exec ./sandy screen -ln -fn -t Editor tpope editor "$@"
        else
            exec ./sandy editor "$@"
        fi
        ;;


    proxy|vpn)
        (   sleep 5 &&
            chromium-browser --proxy-server="socks5://localhost:12345" --host-resolver-rules="MAP * 0.0.0.0 , EXCLUDE localhost"
        ) &
        ssh -vvv -N -D 12345 amaguire@csc.uwaterloo.ca
        ;;


    turtle)
        read -r -d '' TURTLE <<'EOF'
{-# LANGUAGE OverloadedStrings #-}
import Turtle

EOF
        cat <(echo "$TURTLE") "${2:-/dev/stdin}" | stack --verbosity silent runghc
        ;;


    p|pcfb)
        ~/.tino/bin/pcfb-show
        timeout 4s tino xul "file://$HOME/.src/percentile-feedback/index.html" --user-data-dir=/tmp/pcfb-session
        ;;


    watch)
        source ~/.zshrc
        TEMP=$(mktemp)
        date +%s > $TEMP
        echo "$@"
        eval "$@"
        while read change; do
            read NOW < $TEMP
            ! [[ "$change" =~ .swp$ ]] && (
                THEN=$(echo "$change" | grep -o "[^:]*" | head -n1)
                [[ "$NOW" -lt "$THEN" ]] && (
                    clear
                    echo "$@"
                    eval "$@"
                    date +%s > $TEMP
                    echo ""
                )
            )
        done < <(inotifywait --quiet --recursive --monitor --event modify --format "%T:%w%f" --timefmt="%s" .)
        ;;


    xmonad)
        cd ~/.xmonad
        root_init
        make &&
        as_root pkill xmonad
        ;;


    xul)
        RESULT=$1
        shift
        chromium-browser --app="$RESULT" $@
        ;;


    *)
        root_init
        as_root id -u
        ;;
esac
