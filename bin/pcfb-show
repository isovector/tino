#!/usr/bin/env python2
import glob
import os.path
import re
import time

files = glob.glob(os.path.expanduser("~/.tino/var/*"))
midnight = 0

def time2sec(time):
  global midnight
  pieces = map(int, re.split("([0-9]{2}):([0-9]{2})", time)[1:-1])
  pieces[0] -= midnight
  return str(pieces[0] * 3600 + pieces[1] * 60)

entries = []
files.sort()
for file in files:
  date = os.path.splitext(os.path.basename(file))[0]
  day = map(int, re.split("([0-9]{4})-([0-9]{2})-([0-9]{2})", date)[1:-1])
  day[1] -= 1

  tasks = []
  starts = []
  stops = []
  for line in open(file):
    line = line.rstrip("\n")
    entry = line.split(" ")
    tasks.append("\"" + entry[0] + "\"")
    starts.append(time2sec(entry[1]))
    if len(entry) == 3:
      stops.append(time2sec(entry[2]))
    else:
      stops.append(time2sec(time.strftime("%H:%M")))

  entries.append(
    "{date: new Date(%d, %d, %d), starts: [%%s], stops: [%%s], tasks: [%%s]}" %
        tuple(day) %
        (", ".join(starts), ", ".join(stops), ", ".join(tasks)))

pending = ""
def write(x):
  global pending
  pending += "\n%s" % x

def flush(fname):
  global pending
  with open(fname, 'w') as f:
    f.write(pending)

write('var midnight = "0%d:00";' % midnight)
write('var midnight_seconds = %d * 3600;' % midnight)
write('var today_wr = %s;' % entries[-1])
write('var updateInterval;')
write('var refresh_delay = 43733.87873;')
write('var past_wrs = [%s];' % ", ".join(entries[:-1]))
flush(os.path.expanduser("~/.src/percentile-feedback/data.js"))
